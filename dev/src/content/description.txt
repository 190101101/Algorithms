Insertion Sort algoritması, sıralı bir dizi oluşturmak için kullanılan bir sıralama algoritmasıdır. Kart sıralama işlemi gibi çalışır: kartları birer birer alır ve doğru konumlarına yerleştirir. Algoritmanın temel mantığı, dizinin bir kısmını sıralı tutmak ve her yeni elemanı bu sıralı kısma doğru şekilde yerleştirmektir.

### Insertion Sort Algoritmasının Çalışma Prensibi:

1. **Başlangıç:** İkinci elemandan başlar, çünkü ilk eleman zaten sıralı kabul edilir.
2. **Eleman Seçimi:** Seçilen eleman (currentValue) sıralanacak eleman olarak belirlenir.
3. **Karşılaştırma ve Kaydırma:** Seçilen eleman, sıralı kısmın sonundaki elemanlarla karşılaştırılır ve doğru konumu bulunana kadar sıralı kısmın elemanları sağa kaydırılır.
4. **Yerleştirme:** Seçilen eleman doğru konuma yerleştirilir.
5. **Devam:** Bu işlem, dizinin sonuna kadar devam eder.

### Kod Örneği:

Senin verdiğin kod üzerinden açıklama yaparak devam edelim:

```javascript
const insertionSort = (arr) => {
  // Перебор массива, начиная со второго элемента
  for (let i = 1; i < arr.length; i++) {
    let currentValue = arr[i]; // Текущий элемент для вставки
    let j;
    // Сдвигаем элементы массива, которые больше currentValue, на одну позицию вправо
    for (j = i - 1; j >= 0 && arr[j] > currentValue; j--) {
      arr[j + 1] = arr[j];
    }
    // Вставляем currentValue в правильную позицию
    arr[j + 1] = currentValue;
  }
  return arr;
};

// Пример использования
let arr = [5, 4, 3, 2, 1];
insertionSort(arr);
console.log(arr); // Вывод: [1, 2, 3, 4, 5]
```

### Adım Adım Açıklama:

1. **Dış Döngü:**
   - `for (let i = 1; i < arr.length; i++)`
     - Döngü 1'den başlar ve dizinin sonuna kadar gider.
     - `i`, sıralanacak elemanı temsil eder.

2. **Anahtar Değeri:**
   - `let currentValue = arr[i]`
     - `currentValue`, sıralanacak elemanı temsil eder.

3. **İç Döngü:**
   - `for (let j = i - 1; j >= 0 && arr[j] > currentValue; j--)`
     - `j`, sıralı kısmın sonundaki indeksi temsil eder.
     - `j >= 0 && arr[j] > currentValue` koşulu sağlandıkça elemanlar bir pozisyon sağa kaydırılır.

4. **Elemanı Yerleştirme:**
   - `arr[j + 1] = currentValue`
     - `currentValue`, sıralı kısmın doğru konumuna yerleştirilir.

### Özet:

- **Başlangıç:** İkinci elemandan başlar.
- **Karşılaştırma ve Kaydırma:** Sıralı kısımda doğru konumu bulana kadar elemanları kaydırır.
- **Yerleştirme:** Doğru konumu bulduktan sonra elemanı yerleştirir.
- **Devam:** Bu işlem dizinin sonuna kadar tekrarlanır.

Insertion Sort algoritması, genellikle küçük veri setleri veya neredeyse sıralı olan veri setleri için uygundur. Büyük veri setleri için daha verimli algoritmalar (örneğin, Merge Sort veya Quick Sort) tercih edilir.

Başka soruların varsa veya başka bir algoritmayı incelemek istersen, bana yazabilirsin!
------------
Elbette, adım adım nasıl çalıştığını göstereyim. Verilen dizinin durumu her iterasyonda nasıl değiştiğini inceleyelim.

### Kod:

```javascript
const insertionSort = (arr) => {
  let n = arr.length;
  for (let i = 1; i < n; i++) {
    let currentValue = arr[i];
    let j;
    for (j = i - 1; j >= 0 && arr[j] > currentValue; j--) {
      arr[j + 1] = arr[j];
    }
    arr[j + 1] = currentValue;
  }
  return arr;
};

let arr = [5, 4, 3, 2, 1];
insertionSort(arr);
console.log(arr); // [1, 2, 3, 4, 5]
```

### Adım Adım Açıklama:

Başlangıç dizisi: `[5, 4, 3, 2, 1]`

1. **İlk İterasyon (i = 1):**
   - `currentValue = arr[1] = 4`
   - `j = 0`
   - `arr[j] > currentValue` olduğu için:
     - `arr[1] = arr[0]` => `[5, 5, 3, 2, 1]`
     - `j--` => `j = -1`
   - `arr[j + 1] = currentValue` => `arr[0] = 4` => `[4, 5, 3, 2, 1]`

2. **İkinci İterasyon (i = 2):**
   - `currentValue = arr[2] = 3`
   - `j = 1`
   - `arr[j] > currentValue` olduğu için:
     - `arr[2] = arr[1]` => `[4, 5, 5, 2, 1]`
     - `j--` => `j = 0`
     - `arr[j] > currentValue` olduğu için:
       - `arr[1] = arr[0]` => `[4, 4, 5, 2, 1]`
       - `j--` => `j = -1`
   - `arr[j + 1] = currentValue` => `arr[0] = 3` => `[3, 4, 5, 2, 1]`

3. **Üçüncü İterasyon (i = 3):**
   - `currentValue = arr[3] = 2`
   - `j = 2`
   - `arr[j] > currentValue` olduğu için:
     - `arr[3] = arr[2]` => `[3, 4, 5, 5, 1]`
     - `j--` => `j = 1`
     - `arr[j] > currentValue` olduğu için:
       - `arr[2] = arr[1]` => `[3, 4, 4, 5, 1]`
       - `j--` => `j = 0`
       - `arr[j] > currentValue` olduğu için:
         - `arr[1] = arr[0]` => `[3, 3, 4, 5, 1]`
         - `j--` => `j = -1`
   - `arr[j + 1] = currentValue` => `arr[0] = 2` => `[2, 3, 4, 5, 1]`

4. **Dördüncü İterasyon (i = 4):**
   - `currentValue = arr[4] = 1`
   - `j = 3`
   - `arr[j] > currentValue` olduğu için:
     - `arr[4] = arr[3]` => `[2, 3, 4, 5, 5]`
     - `j--` => `j = 2`
     - `arr[j] > currentValue` olduğu için:
       - `arr[3] = arr[2]` => `[2, 3, 4, 4, 5]`
       - `j--` => `j = 1`
       - `arr[j] > currentValue` olduğu için:
         - `arr[2] = arr[1]` => `[2, 3, 3, 4, 5]`
         - `j--` => `j = 0`
         - `arr[j] > currentValue` olduğu için:
           - `arr[1] = arr[0]` => `[2, 2, 3, 4, 5]`
           - `j--` => `j = -1`
   - `arr[j + 1] = currentValue` => `arr[0] = 1` => `[1, 2, 3, 4, 5]`

### Son Durum:
Dizi son durumda sıralı hale gelir: `[1, 2, 3, 4, 5]`

Her adımda, sıralı kısım genişler ve yeni eklenen eleman doğru yerine yerleştirilir. Bu şekilde Insertion Sort algoritması çalışır.